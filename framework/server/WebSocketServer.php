<?php
/**
 * Created by PhpStorm.
 * User: rxw
 * Date: 17-9-16
 * Time: 下午8:54
 */
namespace framework\server;
use framework\base\Container;

class WebSocketServer extends HttpServer
{
    protected function init()
    {
        $this->_server = new  \swoole_websocket_server($this->_conf['ip'], $this->_conf['port']);
        parent::init(); // TODO: Change the autogenerated stub
        $this->onHandShake();
        $this->onOpen();
        if ($this->getValueFromConf('supportHttp', false)) {
            $this->onRequest();
        }
        $this->onMessage();
        $this->onCLose();
    }

    protected function onOpen()
    {
        $this->_server->on('open', function (\swoole_websocket_server $server, $request)
        {
            try
            {
                if ($this->_event) {
                    $this->_event->onOpen($server, $request);
                }
            }
            catch (\Throwable $e)
            {
                $this->triggerException($e);
            }
        });
    }

    protected function onHandShake()
    {
        $this->_server->on('handshake', function (\swoole_http_request $request, \swoole_http_response $response)
        {
            if ($this->_event) {
                $this->_event->onHandShake($request, $response);
            }
            if (!isset($request->header['sec-websocket-key']))
            {
                //'Bad protocol implementation: it is not RFC6455.'
                $response->end();
                return false;
            }
            if (0 === preg_match('#^[+/0-9A-Za-z]{21}[AQgw]==$#', $request->header['sec-websocket-key'])
                || 16 !== strlen(base64_decode($request->header['sec-websocket-key']))
            )
            {
                //Header Sec-WebSocket-Key is illegal;
                $response->end();
                return false;
            }
            $key = base64_encode(sha1($request->header['sec-websocket-key']
                . '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
                true));
            $headers = array(
                'Upgrade'               => 'websocket',
                'Connection'            => 'Upgrade',
                'Sec-WebSocket-Accept'  => $key,
                'Sec-WebSocket-Version' => '13',
                'KeepAlive'             => 'off',
            );
            foreach ($headers as $key => $val)
            {
                $response->header($key, $val);
            }
            $response->status(101);
            $response->end();
            return true;
        });
    }

    protected function onMessage()
    {
        $this->_server->on('message', function (\swoole_websocket_server $server, $frame)
        {
            if (DEBUG)
            {
                ob_start();
            }
//            目前不支持过大消息和二进制数据
            if (!$frame->finish || $frame->opcode === 2) {
                $server->push($frame->fd, '');
                return false;
            }

            $frame->data = json_decode($frame->data, true);
            if (empty($frame->data['controller']) || empty($frame->data['action']) || empty($frame->data['system'])) {
                $server->push($frame->fd, 'bad request');
                return false;
            }


            try
            {
                if (!empty($this->_event))
                {
                    $this->_event->onMessage($server, $frame);
                }
                if (!empty($frame->data['data'])) {
                    $_GET = $frame->data['data'];
                }


                $container = Container::getInstance();
                $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->setSystem($frame->data['system']);
                    // 初始化配置项
                if (!$container->appHasComponents($frame->data['system'])) {
                    $appConf = require_once APP_ROOT. '/' .$frame->data['system'] . '/conf/conf.php';
                    $appConf['addComponentsMap'] = $appConf['addComponentsMap'] ?? [];
                    $container->addComponents($frame->data['system'], $appConf['addComponentsMap']);
                    $container->setAppComponents($frame->data['system'] ,array(
                        'components' => $appConf['components'],
                        'composer' => $appConf['composer']
                    ));
                }


                $result = $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->run(array(
                    'controller' => $frame->data['controller'],
                    'action' => $frame->data['action']
                ));
                if (is_array($result)) {
                    $result = json_encode($result);
                }
                if (DEBUG)
                {
                    $_result = ob_get_clean();
                    $_result = is_array($_result) ? json_encode($_result) : $_result;
                    $result = $_result . $result;
                    unset($_result);
                }


                $server->push($frame->fd, $result);
                unset($result);
            }
            catch (\Throwable $exception)
            {
                $result = $exception->getMessage();
                if (DEBUG) {
                    $result = ob_get_clean() . $result;
                }
                $server->push($frame->fd, $result);
                $this->handleException($exception);
            }


            $container->finish($frame->data['system']);
            $container->finish(SYSTEM_APP_NAME);
            unset($container, $server, $frame);
            return false;
        });
    }

    protected function onCLose()
    {
        $this->_server->on('close', function (\swoole_websocket_server $server, $fd) {
            try
            {
                if (!empty($this->_event)) {
                    $this->_event->onClose($server, $fd);
                }
            }
            catch (\Throwable $e)
            {
                $this->triggerException($e);
            }
        });
    }
}