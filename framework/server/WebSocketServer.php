<?php
/**
 * Created by PhpStorm.
 * User: rxw
 * Date: 17-9-16
 * Time: 下午8:54
 */
namespace framework\server;
use framework\base\Container;

class WebSocketServer extends BaseServer
{
    protected function init()
    {
        $this->_server = new  \swoole_websocket_server($this->_conf['ip'], $this->_conf['port']);
        parent::init(); // TODO: Change the autogenerated stub
        $this->onHandShake();
        $this->onOpen();
        if ($this->getValueFromConf('supportHttp', false)) {
            $this->onRequest();
        }
        $this->onMessage();
        $this->onCLose();
    }

    protected function onOpen()
    {
        $this->_server->on('open', function (\swoole_websocket_server $server, $request)
        {
            try
            {
                if ($this->_event) {
                    $this->_event->onOpen($server, $request);
                }
            }
            catch (\Exception $e)
            {
                $this->triggerException($e);
            }
            catch (\Error $e)
            {
                $this->triggerException($e);
            }
        });
    }

    protected function onHandShake()
    {
        $this->_server->on('handshake', function (\swoole_http_request $request, \swoole_http_response $response)
        {
            if ($this->_event) {
                $this->_event->onHandShake($request, $response);
            }
            if (!isset($request->header['sec-websocket-key']))
            {
                //'Bad protocol implementation: it is not RFC6455.'
                $response->end();
                return false;
            }
            if (0 === preg_match('#^[+/0-9A-Za-z]{21}[AQgw]==$#', $request->header['sec-websocket-key'])
                || 16 !== strlen(base64_decode($request->header['sec-websocket-key']))
            )
            {
                //Header Sec-WebSocket-Key is illegal;
                $response->end();
                return false;
            }
            $key = base64_encode(sha1($request->header['sec-websocket-key']
                . '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
                true));
            $headers = array(
                'Upgrade'               => 'websocket',
                'Connection'            => 'Upgrade',
                'Sec-WebSocket-Accept'  => $key,
                'Sec-WebSocket-Version' => '13',
                'KeepAlive'             => 'off',
            );
            foreach ($headers as $key => $val)
            {
                $response->header($key, $val);
            }
            $response->status(101);
            $response->end();
            return true;
        });
    }

    protected function onRequest()
    {
        $this->_server->on("request", function (\swoole_http_request $request,\swoole_http_response $response)
        {
            if (DEBUG)
            {
                ob_start();
            }
            if ($this->_event)
            {
                $this->_event->onRequest($request,$response);
            }
            $container = Container::getInstance();
            if (!empty($request->get)) {
                $_GET = $request->get;
            }
            if (!empty($request->post)) {
                $_POST = $request->post;
            }
            if (!empty($request->files)) {
                $_FILES = $request->files;
//                $container->getComponent('upload')->save('file'); 上传文件测试
            }
            if (!empty($request->cookie)) {
                $_COOKIE = $request->cookie;
            }

            $hasEnd = false;
            try
            {
                if ($this->_event)
                {
                    $this->_event->onResponse($request,$response);
                }
                $request->server['HTTP_HOST'] = $request->header['host'];
                foreach ($request->server as $key => $item)
                {
                    $request->server[strtoupper($key)] = $item;
                    unset($request->server[$key]);
                }
                $_SERVER = $request->server;
                $urlInfo = $container->getComponent(SYSTEM_APP_NAME, 'url')->run();
                if ($urlInfo !== false) {
                    $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->setSystem($urlInfo['system']);
                    // 初始化配置项
                    if (!$container->appHasComponents($urlInfo['system'])) {
                        $appConf = require_once APP_ROOT. '/' .$urlInfo['system'] . '/conf/conf.php';

                        $appConf['addComponentsMap'] = $appConf['addComponentsMap'] ?? [];
                        $container->addComponents($urlInfo['system'], $appConf['addComponentsMap']);
                        $container->setAppComponents($urlInfo['system'] ,array(
                            'components' => $appConf['components'],
                            'composer' => $appConf['composer']
                        ));
                    }
                    $result = $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->run($urlInfo);
                    $container->getComponent(SYSTEM_APP_NAME, 'cookie')->send($response);
                    $hasEnd = $container->getComponent(SYSTEM_APP_NAME, 'response')->send($response, $result);
                    $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->setSystem('');
                    unset($result);
                }
            }
            catch (\Exception $exception)
            {
                $code = $exception->getCode() > 0 ? $exception->getCode() : 404;
                $response->status($code);
                if (DEBUG) {
                    // ob_get_clean();
                    $response->write($exception->getMessage().$exception->getTraceAsString());
                }
                $this->triggerException($exception);
            }
            catch (\Error $e)
            {
                $code = $e->getCode() > 0 ? $e->getCode() : 500;
                $response->status($code);
                if (DEBUG) {
                    // ob_get_clean();
                    $response->write($e->getMessage().$e->getTraceAsString());
                }
                $this->triggerException($e);
            }
            if (!$hasEnd)
            {
                $response->end();
            }

            $_GET = null;
            $_POST = null;
            $_FILES = null;
            $_COOKIE = null;
            $_SERVER = null;
            $container->finish($urlInfo['system']);
            unset($container,$request,$response, $urlInfo);
        });
    }

    protected function onMessage()
    {
        $this->_server->on('message', function (\swoole_websocket_server $server, $frame)
        {
            if (DEBUG)
            {
                ob_start();
            }
//            目前不支持过大消息和二进制数据
            if (!$frame->finish || $frame->opcode === 2) {
                $server->push($frame->fd, '');
                return false;
            }

            $frame->data = json_decode($frame->data, true);
            if (empty($frame->data['controller']) || empty($frame->data['action']) || empty($frame->data['system'])) {
                $server->push($frame->fd, 'bad request');
                return false;
            }

            if (!empty($this->_event))
            {
                $this->_event->onMessage($server, $frame);
            }

            $container = Container::getInstance();

            try
            {
                if (!empty($frame->data['data'])) {
                    $_GET = $frame->data['data'];
                }
                $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->setSystem($frame->data['system']);
                    // 初始化配置项
                if (!$container->appHasComponents($frame->data['system'])) {
                    $appConf = require_once APP_ROOT. '/' .$frame->data['system'] . '/conf/conf.php';

                    $appConf['addComponentsMap'] = $appConf['addComponentsMap'] ?? [];
                    $container->addComponents($frame->data['system'], $appConf['addComponentsMap']);
                    $container->setAppComponents($frame->data['system'] ,array(
                        'components' => $appConf['components'],
                        'composer' => $appConf['composer']
                    ));
                }

                $result = $container->getComponent(SYSTEM_APP_NAME, 'dispatcher')->run(array(
                    'controller' => $frame->data['controller'],
                    'action' => $frame->data['action']
                ));

                if (is_array($result)) {
                    $result = json_encode($result);
                }
                if (DEBUG)
                {
                    $_result = ob_get_clean();
                    $_result = is_array($_result) ? json_encode($_result) : $_result;
                    $result = $_result . $result;
                    unset($_result);
                }
                $server->push($frame->fd, $result);
                unset($result);
            }
            catch (\Exception $exception)
            {
                ob_get_clean();
                $server->push($frame->fd, $exception->getMessage());
                $this->triggerException($exception);
            }
            catch (\Error $e)
            {
                ob_get_clean();
                $server->push($frame->fd, $e->getMessage());
                $this->triggerException($e);
            }
            $container->finish($frame->data['system']);
            unset($container, $server, $frame);
            return false;
        });
    }

    protected function onCLose()
    {
        $this->_server->on('close', function (\swoole_websocket_server $server, $fd) {
            try
            {
                if (!empty($this->_event)) {
                    $this->_event->onClose($server, $fd);
                }
            }
            catch (\Exception $e)
            {
                $this->triggerException($e);
            }
            catch (\Error $e)
            {
                $this->triggerException($e);
            }
        });
    }
}